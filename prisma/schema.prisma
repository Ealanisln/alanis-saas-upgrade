generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  password         String?
  role             Role      @default(user)
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  accounts         Account[]
  Order            Order[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String
  price        Float          @default(0)
  slug         String         @unique
  tags         String[]       @default([])
  categoryId   String
  OrderItem    OrderItem[]
  category     Category       @relation(fields: [categoryId], references: [id])
  ProductImage ProductImage[]

  @@index([categoryId])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  price     Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id            String      @id @default(uuid())
  subTotal      Float
  tax           Float
  total         Float
  itemsInOrder  Int
  isPaid        Boolean     @default(false)
  paidAt        DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String
  transactionId String?
  user          User        @relation(fields: [userId], references: [id])
  OrderItem     OrderItem[]
}

enum Role {
  admin
  user
}
